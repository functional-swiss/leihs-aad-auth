#!/usr/bin/env ruby

require 'active_support/all'
require 'cgi'
require 'digest'
require 'jwt'
require 'logger'
require 'optparse'
require 'ostruct'
require 'pathname'
require 'rest-client'
require 'securerandom'
require 'set'
require 'sinatra/base'
require 'yaml'


$logger = Logger.new(STDOUT)
$logger.level = Logger::WARN

# DEV stuff only
# require 'pry'
# require 'rerun'
# require 'pry-remote'

################################################################################
### options and config #########################################################
################################################################################

options = OpenStruct.new
# options.config_file = Pathname.new("dev/config.yml")
OptionParser.new do |opts|
  opts.banner = "Usage: phzh-ms-open-id-auth-system.rb [options]"

  opts.on("-c", "--config-file [PATH]", String, "Configuration file") do |cf|
    options.config_file = Pathname.new cf
  end

  opts.on("-l", "--log-level LOG_LEVEL", String, "Logging level FATAL, ERROR, WARN, INFO, or DEBUG") do |ll|
    $logger.level = "Logger::#{ll.upcase}".constantize
  end

end.parse!

$config = {
  port: 3434
}.with_indifferent_access.deep_merge(
  YAML.load_file(options.config_file).with_indifferent_access)


################################################################################
### a custom error which message will appear in the reponse ####################
################################################################################

class AuthenticationError < StandardError
  def initialize(msg="Unclassified Authentication Error. " \
                 + "Please contact your leihs administrator.")
    super
  end
end


################################################################################
### the web app ################################################################
################################################################################

class AuthenticatorApp <  Sinatra::Base

  set :environment, :production

  def initialize()

    $email_attribute = $config[:email_attribute].presence  \
      || (raise 'email_attribute must be present in config')

    $tenant = $config[:tenant].presence  \
      || (raise 'tenant must be present in config')

    $external_base_url = $config[:external_base_url].presence  \
      || (raise 'external_base_url must be present in config')

    $name = $config[:name].presence \
      || (raise 'name must be present in config')

    $client_id = $config[:client_id].presence  \
      || (raise 'client_id must be present in config')

    $private_key = OpenSSL::PKey.read(
        $config[:private_key].presence \
        || (raise 'private_key must be present in config'))

    $public_key = OpenSSL::PKey.read(
        $config[:public_key].presence \
        || (raise 'public_key must be present in config'))

    $leihs_public_key = OpenSSL::PKey.read(
        $config[:leihs_public_key].presence \
        || (raise 'leihs_public_key must be present in config'))

    $nonces = Set[]

    # get per tenant config and signing keys
    # NOTE: Microsoft recomments to reload this every 24 Hours

    $open_id_config =
      "https://login.microsoftonline.com/#{$config[:tenant]}/.well-known/openid-configuration" \
      .yield_self { |config_url| RestClient.get config_url}
      .yield_self { |resp| JSON.parse(resp).with_indifferent_access }

    $ms_keys = $open_id_config
      .yield_self { |config| config[:jwks_uri] }
      .yield_self { |jwks_uri| RestClient.get jwks_uri}
      .yield_self { |resp| JSON.parse(resp).with_indifferent_access }
      .yield_self { |res| $ms_keys = res[:keys] }

  end


#  before do
#    binding.remote_pry
#    $logger.debug([:before, params])
#    if params['name'] != $name
#      raise "The name '#{params['name']}' does not match the name from configuration '#{$name}'."
#    end
#  end


  ### just for pinging this service ############################################

  get '/authenticators/ms-open-id/:name/status' do
    'OK'
  end


  ### error handling and error messages ########################################

  def expired_response e, sign_in_request_token
    status 403
    $logger.error "#{e} #{e.backtrace}"
    sign_in_request = JWT.decode sign_in_request_token,
      $leihs_public_key, false, { algorithm: 'ES256' }

    <<-HTML.strip_heredoc
        <html>
          <head></head>
          <body>
            <h1>Error: Token Expired </h1>
            <p> Please <a href="#{sign_in_request[0]['server_base_url']}"> try again. </a></p>
          </body>
        </html>
    HTML
  end

  def authentication_error_response e
    status 403
    $logger.error "#{e} #{e.backtrace}"
    <<-HTML.strip_heredoc
        <html>
          <head></head>
          <body>
            <h1>Authentication Error</h1>
            <p> #{e.message} </p>
          </body>
        </html>
    HTML
  end

  def generic_error_response e
    status 403
    $logger.error "#{e} #{e.backtrace}"
    <<-HTML.strip_heredoc
        <html>
          <head></head>
          <body>
            <h1> Unspecified Error in PHZH Open-ID Authentication Service </h1>
            <p> Please try again. </p>
            <p> Contact your leihs administrator if this problem occurs again. </p>
          </body>
        </html>
    HTML
  end


  ### sign-in ##################################################################


  get '/authenticators/ms-open-id/:name/sign-in' do

    $logger.debug(['sign-in', params])

    begin

      sign_in_request_token = params[:token].presence
      sign_in_request = JWT.decode sign_in_request_token,
        $leihs_public_key, true, { algorithm: 'ES256' }

      email = sign_in_request.first["email"]

      token = JWT.encode({
        sign_in_request_token: sign_in_request_token
        # and more if we ever need it
      }, $private_key, 'ES256')


      nonce = SecureRandom.uuid
      $nonces.add nonce

      callback_url = "#{$external_base_url}/authenticators/ms-open-id/#{$name}/callback"

      $logger.debug({callback: callback_url})

      url = "https://login.microsoftonline.com/" + CGI::escape($tenant) \
        + '/oauth2/authorize?scope=openid&response_type=id_token&response_mode=form_post' \
        + '&redirect_uri=' + CGI::escape(callback_url) \
        + '&client_id=' + CGI::escape($client_id) \
        + '&login_hint=' + CGI::escape(email) \
        + '&state=' + CGI::escape(token) \
        + '&nonce=' + nonce

      redirect url

    rescue JWT::ExpiredSignature => e
      expired_response e, sign_in_request_token
    rescue StandardError => e
      generic_error_response e
    end

  end

  ### sign-out ##################################################################

  get '/authenticators/ms-open-id/:name/sign-out' do

    $logger.debug(['sign-out', params])

    begin
      redirect $open_id_config[:end_session_endpoint] \
        + "?post_logout_redirect_uri="  \
        + CGI::escape(params[:back_to])
    rescue StandardError => e
      generic_error_response e
    end
  end


  ### callback ##################################################################

  def ms_signing_key(unverified_message)

    kid = unverified_message[1]["kid"]

    cert =$ms_keys.select{|k| k["kid"] == kid}.first["x5c"].first

    OpenSSL::X509::Certificate.new(
      "-----BEGIN CERTIFICATE-----\n" + cert +  "\n-----END CERTIFICATE-----\n"
    ).public_key

  end


  def decode_id_token id_token

      unverified_message = JWT.decode(id_token, nil, false)

      key = ms_signing_key(unverified_message)

      algorithm = unverified_message[1]["alg"]

      JWT.decode(id_token, ms_signing_key(unverified_message), true, {algorithm: algorithm})

  end



  post '/authenticators/ms-open-id/:name/callback' do


    $logger.debug(['callback', params])

    begin

      id_token_data = decode_id_token(params[:id_token]).first.with_indifferent_access

      nonce = id_token_data[:nonce]

      if $nonces.include? nonce
        $nonces.delete nonce
      else
        raise AuthenticationError,
          "The nonce ist not known. Please try again as this can be a temporary issue. " +
          "Contact your leihs administrator if the problem persists."
      end

      token_data = JWT.decode(params[:state], $public_key,
                              true, { algorithm: 'ES256'}).first.with_indifferent_access

      sign_in_request_token = token_data[:sign_in_request_token]

      sign_in_request = JWT.decode sign_in_request_token,
        $leihs_public_key, true, { algorithm: 'ES256' }


      email = id_token_data[$config[:email_attribute]].presence

      unless email
        raise AuthenticationError,
          "The required property `unique_name` resp email is missing. Contact your leihs administrator."
      end

      unless sign_in_request[0]["email"].downcase == email.downcase
        raise AuthenticationError,
          "There is an account mismatch between leihs and the response from the Open-ID provider. " +
          "Make sure you use consistent accounts! " +
          "Contact your leihs administrator if the problem persists."
      end


      token = JWT.encode({
        sign_in_request_token: sign_in_request_token,
        email: email.downcase,
        success: true}, $private_key, 'ES256')

      url = sign_in_request.first["server_base_url"] \
        + sign_in_request.first['path'] + "?token=#{token}"

      redirect url

    rescue JWT::ExpiredSignature => e
      expired_response e, sign_in_request_token
    rescue AuthenticationError => e
      authentication_error_response e
    rescue StandardError => e
      generic_error_response e
    end

  end

end



################################################################################
### start up ###################################################################
################################################################################

AuthenticatorApp.port = $config[:port]
AuthenticatorApp.bind = 'localhost'

AuthenticatorApp.run!
